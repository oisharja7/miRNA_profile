if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
#reading and merging annotation file
annotation <- read.table("GPL16699-15607.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE, fill = TRUE)
q
Q
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
(Q)
(Q)
Q
Q
q()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
undebug()
q()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("limma")
# affy package
BiocManager::install("affy")
library(limma)
library(affy)
getwd()
# working directory
setwd("D:/DEG analysis_oisharja/miRNA profile")
# read cell files
rawData <- ReadAffy()
getwd()
list.files(pattern = "\\.CEL$", ignore.case = TRUE)
files <- list.files(pattern = "\\.CEL$", ignore.case = TRUE)
rawData <- ReadAffy(filenames = files, celfile.path = "D:/DEG analysis_oisharja/miRNA profile")
# read cell files
files <- list.files(pattern = "\\.CEL$", ignore.case = TRUE)
rawData <- ReadAffy(filenames = files, celfile.path = "D:/DEG analysis_oisharja/miRNA profile")
# read cell files
files <- list.files(pattern = "\\.CEL$", ignore.case = TRUE)
rawData <- ReadAffy(filenames = files, celfile.path = "D:/DEG analysis_oisharja/miRNA profile")
# RMA bg correction and normalization
eset <- rma(rawData)
# phenotype data of expressionset matrix
head(pData(eset))
# grouping
group <- rep("Tumor", 25)
group[13:18] <- "Normal" # assigning 13-18th sample as normal
group <- factor(group, levels = c("Tumor", "Normal")) # converting vector to factor
pData(eset)$group <- group # adding group to phenotype data of expressionset
head(pData(eset), 25) # verification
# design matrix
design <- model.matrix(~0 + group)
View(design)
colnames(design) <- levels(group) # assigning colnames according to levels
View(design)
# fit the linear model to the expression matrix
fit <- lmFit(exprs(eset), design)
# defining contrast: Tumor vs Normal
contraxt.matrix <- makeContrasts(Tumor - Normal, levels = design)
fit2 <- contrasts.fit(fit, contraxt.matrix)
# empirical bayes moderation
fit2 <- eBayes(fit2)
# extract DE miRNA
results <- topTable(fit2, adjust.method = "BH", number = Inf)
View(results)
head(results)
